;; 4.1
;;; lisp大量使用括号和前缀表示法。
;;; lisp发明者 John McCarthy

;; 4.2
;; lisp的解释器

;; 4.3
;; S-表达式
;; S-表达式的基本元素是列表(list)和原子(atom)。

;;; 数字的表示方法
123        ; 整数一百二十三
3/7        ; 比值七分之三
1.0        ; 默认精度的浮点数一
1.0e0      ; 同一个浮点数的另一种写法
1.0d0      ; 双精度的浮点数一
1.0e-4     ; 等价于万分之一的浮点数
+42        ; 整数四十二
-42        ; 整数负四十二
-1/4       ; 比值负四分之一
-2/8       ; 负四分之一的另一种写法
246/2      ; 整数一百二十三的另一种写法

;;; 字符串的表示方法
;;; 句法字符 ()""'',:;\|`
"foo"      ; 含有f、o和o的字符串
"fo\o"     ; 同一个字符串
"fo\\o"    ; 含有f、o、\和o的字符串
"fo\"o"    ; 含有f、o、"和o的字符串

;; 读取器讲把foo、Foo和FOO都读成同一个符号FOO
;; \f\o\o和|foo|将都被读成foo
;; 语言标准定义的名字只使用字母表字符外加*、+、-、/、1、2、<、=、>以及&


;; 4.4

;; 4.5 函数调用
;; (function-name argument*)
(+ 1 2)
(* (+ 1 2) (- 3 4))

;; 4.6 特殊操作符
;; (if x (format t "yes") (format t "no"))
;; (if test-form then-form [ else-form])
(quote (+ 1 2))    ;QUOTE 接受一个单一表达式作为其“参数”并简单返回它，不经求值
'(+  1 2)
(let ((x 10)) x)   ;变量名赋值

;; 4.7 宏
;; 宏形式的元素不经求值即被传递到宏函数里面
;; 由宏函数所返回的形式（展开式(expansion)）按照正常的求值规则进行求值

;; 4.8 真、假、等价
;; 符号NIL是唯一的假值，其他所有的都是真值
;; 符号T是标准的真值，可用于需要返回一个非NIL值却又没有其他值可用的情况
;; 关于NIL，唯一麻烦的一点是，它是唯一一个既是原子又是列表的对象
;; NIL除了用来表示假以外，它还用来表示空列表。
;; nil、()、'nil、'()
;; t、't
;; 等价：=用来比较数字，CHAR=用来比较字符
;; EQ 用来测试“对象标识”
;; EQL 保证当相同类型的两个对象表示相同的数字或字符值时，它们是等价的
;; EQUAL EQUALP

;; 4.9 格式化Lisp代码
(defun print-list (list)
  (dolist (i list)
    (format t "item: ~a~%" i)))


;;;; 四个分号用于文件头注释

;;; 带有三个分号的注释将通常作为段落注释应用到接下来的一大段代码上

(defun foo (x)
  (dotimes (i x)
    ;; 两个分号说明该注释应用于接下来的代码上
    ;; 注意，该注释与其所应用的代码具有相同的缩进
    (some-function-call)
    (another i)                 ; 本注释仅用于次行
    (and-another)               ; 这个也是一样
    (baz)))
